version: "3"

services:
  customers-service-api-db:
    image: "mysql:latest"
    container_name: customers-service-api-db
    restart: always
    environment:
      - "MYSQL_DATABASE=mysql"
      - "MYSQL_ROOT_PASSWORD=docker"
    ports:
      - "3307:3306"
    volumes:
      - ./customers-service-api/db-dump/:/docker-entrypoint-initdb.d

  customers-service-api:
    build: ./customers-service-api/.
    restart: always
    ports:
      - "8000:8080"
    environment:
      - "MYSQL_HOST=customers-service-api-db"
      - "MYSQL_USER=root"
      - "MYSQL_PASSWORD=docker"
      - "MYSQL_DATABASE=mysql"
    command: java -jar target/customers_services_api-0.0.1-SNAPSHOT.jar
    depends_on:
      - customers-service-api-db

  product-stock-service-db:
    image: "mysql:latest"
    container_name: product-stock-service-db
    restart: always
    environment:
      - "MYSQL_DATABASE=mysql"
      - "MYSQL_ROOT_PASSWORD=docker"
    ports:
      - "3308:3306"
    volumes:
      - ./product-stock-service-api/db-dump/:/docker-entrypoint-initdb.d

  product-stock-service-api:
    build: ./product-stock-service-api/.
    restart: always
    ports:
      - "8001:8080"
    environment:
      - "MYSQL_HOST=product-stock-service-db"
      - "MYSQL_USER=root"
      - "MYSQL_PASSWORD=docker"
      - "MYSQL_DATABASE=mysql"
    command: java -jar target/product_stock_service_api-0.0.1-SNAPSHOT.jar
    depends_on:
      - product-stock-service-db

  api-gateway:
    build: ./api-gateway/.
    restart: always
    ports:
      - "3000:3000"
    environment:
      - "PORT=3000"
      - "CUSTOMERS_SERVICE_API_URL=http://customers-service-api:8080/api/v1"
    command: npm run dev
    depends_on:
      - customers-service-api
      - product-stock-service-api
